//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.42000
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace GPGO_MultiPLCs.GP_PLCs {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BitType", Namespace="http://schemas.datacontract.org/2004/07/MultiPLCs_Gate.ViewModels")]
    public enum BitType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        M = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        B = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        S = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        X = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Y = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataType", Namespace="http://schemas.datacontract.org/2004/07/MultiPLCs_Gate.ViewModels")]
    public enum DataType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        D = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        W = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PLC_Messages", Namespace="http://schemas.datacontract.org/2004/07/MultiPLCs_Gate.ViewModels")]
    [System.SerializableAttribute()]
    public partial class PLC_Messages : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, bool> BField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, short> DField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, bool> MField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, bool> SField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, short> WField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, bool> XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<int, bool> YField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, bool> B {
            get {
                return this.BField;
            }
            set {
                if ((object.ReferenceEquals(this.BField, value) != true)) {
                    this.BField = value;
                    this.RaisePropertyChanged("B");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, short> D {
            get {
                return this.DField;
            }
            set {
                if ((object.ReferenceEquals(this.DField, value) != true)) {
                    this.DField = value;
                    this.RaisePropertyChanged("D");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, bool> M {
            get {
                return this.MField;
            }
            set {
                if ((object.ReferenceEquals(this.MField, value) != true)) {
                    this.MField = value;
                    this.RaisePropertyChanged("M");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, bool> S {
            get {
                return this.SField;
            }
            set {
                if ((object.ReferenceEquals(this.SField, value) != true)) {
                    this.SField = value;
                    this.RaisePropertyChanged("S");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, short> W {
            get {
                return this.WField;
            }
            set {
                if ((object.ReferenceEquals(this.WField, value) != true)) {
                    this.WField = value;
                    this.RaisePropertyChanged("W");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, bool> X {
            get {
                return this.XField;
            }
            set {
                if ((object.ReferenceEquals(this.XField, value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<int, bool> Y {
            get {
                return this.YField;
            }
            set {
                if ((object.ReferenceEquals(this.YField, value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GP_PLCs.IGPService", CallbackContract=typeof(GPGO_MultiPLCs.GP_PLCs.IGPServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IGPService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/CheckSignal")]
        void CheckSignal(int dev);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/CheckSignal")]
        System.Threading.Tasks.Task CheckSignalAsync(int dev);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Initial")]
        void Initial();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Initial")]
        System.Threading.Tasks.Task InitialAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGPService/Get_Bit", ReplyAction="http://tempuri.org/IGPService/Get_BitResponse")]
        bool Get_Bit(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, int dev);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGPService/Get_Bit", ReplyAction="http://tempuri.org/IGPService/Get_BitResponse")]
        System.Threading.Tasks.Task<bool> Get_BitAsync(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, int dev);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGPService/Get_Bits", ReplyAction="http://tempuri.org/IGPService/Get_BitsResponse")]
        System.Collections.Generic.Dictionary<int, bool> Get_Bits(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, int[] devs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGPService/Get_Bits", ReplyAction="http://tempuri.org/IGPService/Get_BitsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, bool>> Get_BitsAsync(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, int[] devs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGPService/Get_Data", ReplyAction="http://tempuri.org/IGPService/Get_DataResponse")]
        short Get_Data(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGPService/Get_Data", ReplyAction="http://tempuri.org/IGPService/Get_DataResponse")]
        System.Threading.Tasks.Task<short> Get_DataAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGPService/Get_Datas", ReplyAction="http://tempuri.org/IGPService/Get_DatasResponse")]
        System.Collections.Generic.Dictionary<int, short> Get_Datas(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int[] devs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGPService/Get_Datas", ReplyAction="http://tempuri.org/IGPService/Get_DatasResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, short>> Get_DatasAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int[] devs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGPService/Get_Int", ReplyAction="http://tempuri.org/IGPService/Get_IntResponse")]
        int Get_Int(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGPService/Get_Int", ReplyAction="http://tempuri.org/IGPService/Get_IntResponse")]
        System.Threading.Tasks.Task<int> Get_IntAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGPService/Get_Ints", ReplyAction="http://tempuri.org/IGPService/Get_IntsResponse")]
        System.Collections.Generic.Dictionary<int, int> Get_Ints(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int[] devs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGPService/Get_Ints", ReplyAction="http://tempuri.org/IGPService/Get_IntsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, int>> Get_IntsAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int[] devs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGPService/Get_String", ReplyAction="http://tempuri.org/IGPService/Get_StringResponse")]
        string Get_String(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, int length);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGPService/Get_String", ReplyAction="http://tempuri.org/IGPService/Get_StringResponse")]
        System.Threading.Tasks.Task<string> Get_StringAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, int length);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Set_Bit")]
        void Set_Bit(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, int dev, bool val);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Set_Bit")]
        System.Threading.Tasks.Task Set_BitAsync(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, int dev, bool val);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Set_Bits")]
        void Set_Bits(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, System.Collections.Generic.Dictionary<int, bool> devs);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Set_Bits")]
        System.Threading.Tasks.Task Set_BitsAsync(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, System.Collections.Generic.Dictionary<int, bool> devs);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Set_Data")]
        void Set_Data(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, short val);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Set_Data")]
        System.Threading.Tasks.Task Set_DataAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, short val);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Set_Datas")]
        void Set_Datas(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, System.Collections.Generic.Dictionary<int, short> devs);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Set_Datas")]
        System.Threading.Tasks.Task Set_DatasAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, System.Collections.Generic.Dictionary<int, short> devs);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Set_Int")]
        void Set_Int(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, int val);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Set_Int")]
        System.Threading.Tasks.Task Set_IntAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, int val);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Set_Ints")]
        void Set_Ints(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, System.Collections.Generic.Dictionary<int, int> devs);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Set_Ints")]
        System.Threading.Tasks.Task Set_IntsAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, System.Collections.Generic.Dictionary<int, int> devs);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Set_String")]
        void Set_String(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, string val);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Set_String")]
        System.Threading.Tasks.Task Set_StringAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, string val);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/SetReadList")]
        void SetReadList(int index, string[] list);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/SetReadList")]
        System.Threading.Tasks.Task SetReadListAsync(int index, string[] list);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/SetReadLists")]
        void SetReadLists(string[][] list);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/SetReadLists")]
        System.Threading.Tasks.Task SetReadListsAsync(string[][] list);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGPServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Messages_Send")]
        void Messages_Send(int index, GPGO_MultiPLCs.GP_PLCs.PLC_Messages val);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Status_Changed")]
        void Status_Changed(int index, bool val);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGPServiceChannel : GPGO_MultiPLCs.GP_PLCs.IGPService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GPServiceClient : System.ServiceModel.DuplexClientBase<GPGO_MultiPLCs.GP_PLCs.IGPService>, GPGO_MultiPLCs.GP_PLCs.IGPService {
        
        public GPServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GPServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GPServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GPServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GPServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void CheckSignal(int dev) {
            base.Channel.CheckSignal(dev);
        }
        
        public System.Threading.Tasks.Task CheckSignalAsync(int dev) {
            return base.Channel.CheckSignalAsync(dev);
        }
        
        public void Initial() {
            base.Channel.Initial();
        }
        
        public System.Threading.Tasks.Task InitialAsync() {
            return base.Channel.InitialAsync();
        }
        
        public bool Get_Bit(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, int dev) {
            return base.Channel.Get_Bit(type, index, dev);
        }
        
        public System.Threading.Tasks.Task<bool> Get_BitAsync(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, int dev) {
            return base.Channel.Get_BitAsync(type, index, dev);
        }
        
        public System.Collections.Generic.Dictionary<int, bool> Get_Bits(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, int[] devs) {
            return base.Channel.Get_Bits(type, index, devs);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, bool>> Get_BitsAsync(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, int[] devs) {
            return base.Channel.Get_BitsAsync(type, index, devs);
        }
        
        public short Get_Data(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev) {
            return base.Channel.Get_Data(type, index, dev);
        }
        
        public System.Threading.Tasks.Task<short> Get_DataAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev) {
            return base.Channel.Get_DataAsync(type, index, dev);
        }
        
        public System.Collections.Generic.Dictionary<int, short> Get_Datas(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int[] devs) {
            return base.Channel.Get_Datas(type, index, devs);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, short>> Get_DatasAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int[] devs) {
            return base.Channel.Get_DatasAsync(type, index, devs);
        }
        
        public int Get_Int(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev) {
            return base.Channel.Get_Int(type, index, dev);
        }
        
        public System.Threading.Tasks.Task<int> Get_IntAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev) {
            return base.Channel.Get_IntAsync(type, index, dev);
        }
        
        public System.Collections.Generic.Dictionary<int, int> Get_Ints(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int[] devs) {
            return base.Channel.Get_Ints(type, index, devs);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, int>> Get_IntsAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int[] devs) {
            return base.Channel.Get_IntsAsync(type, index, devs);
        }
        
        public string Get_String(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, int length) {
            return base.Channel.Get_String(type, index, dev, length);
        }
        
        public System.Threading.Tasks.Task<string> Get_StringAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, int length) {
            return base.Channel.Get_StringAsync(type, index, dev, length);
        }
        
        public void Set_Bit(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, int dev, bool val) {
            base.Channel.Set_Bit(type, index, dev, val);
        }
        
        public System.Threading.Tasks.Task Set_BitAsync(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, int dev, bool val) {
            return base.Channel.Set_BitAsync(type, index, dev, val);
        }
        
        public void Set_Bits(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, System.Collections.Generic.Dictionary<int, bool> devs) {
            base.Channel.Set_Bits(type, index, devs);
        }
        
        public System.Threading.Tasks.Task Set_BitsAsync(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, System.Collections.Generic.Dictionary<int, bool> devs) {
            return base.Channel.Set_BitsAsync(type, index, devs);
        }
        
        public void Set_Data(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, short val) {
            base.Channel.Set_Data(type, index, dev, val);
        }
        
        public System.Threading.Tasks.Task Set_DataAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, short val) {
            return base.Channel.Set_DataAsync(type, index, dev, val);
        }
        
        public void Set_Datas(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, System.Collections.Generic.Dictionary<int, short> devs) {
            base.Channel.Set_Datas(type, index, devs);
        }
        
        public System.Threading.Tasks.Task Set_DatasAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, System.Collections.Generic.Dictionary<int, short> devs) {
            return base.Channel.Set_DatasAsync(type, index, devs);
        }
        
        public void Set_Int(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, int val) {
            base.Channel.Set_Int(type, index, dev, val);
        }
        
        public System.Threading.Tasks.Task Set_IntAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, int val) {
            return base.Channel.Set_IntAsync(type, index, dev, val);
        }
        
        public void Set_Ints(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, System.Collections.Generic.Dictionary<int, int> devs) {
            base.Channel.Set_Ints(type, index, devs);
        }
        
        public System.Threading.Tasks.Task Set_IntsAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, System.Collections.Generic.Dictionary<int, int> devs) {
            return base.Channel.Set_IntsAsync(type, index, devs);
        }
        
        public void Set_String(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, string val) {
            base.Channel.Set_String(type, index, dev, val);
        }
        
        public System.Threading.Tasks.Task Set_StringAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, string val) {
            return base.Channel.Set_StringAsync(type, index, dev, val);
        }
        
        public void SetReadList(int index, string[] list) {
            base.Channel.SetReadList(index, list);
        }
        
        public System.Threading.Tasks.Task SetReadListAsync(int index, string[] list) {
            return base.Channel.SetReadListAsync(index, list);
        }
        
        public void SetReadLists(string[][] list) {
            base.Channel.SetReadLists(list);
        }
        
        public System.Threading.Tasks.Task SetReadListsAsync(string[][] list) {
            return base.Channel.SetReadListsAsync(list);
        }
    }
}
