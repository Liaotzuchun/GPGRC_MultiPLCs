//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.42000
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace GPGO_MultiPLCs.GP_PLCs {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BitType", Namespace="http://schemas.datacontract.org/2004/07/MultiPLCs_Gate.ViewModels")]
    public enum BitType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        M = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        B = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        X = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Y = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataType", Namespace="http://schemas.datacontract.org/2004/07/MultiPLCs_Gate.ViewModels")]
    public enum DataType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        D = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        W = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GP_PLCs.IGPService", CallbackContract=typeof(GPGO_MultiPLCs.GP_PLCs.IGPServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IGPService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Initial")]
        void Initial();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Initial")]
        System.Threading.Tasks.Task InitialAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/CheckSignal")]
        void CheckSignal(int dev);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/CheckSignal")]
        System.Threading.Tasks.Task CheckSignalAsync(int dev);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/SetReadList")]
        void SetReadList(int index, string[] list);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/SetReadList")]
        System.Threading.Tasks.Task SetReadListAsync(int index, string[] list);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/SetReadLists")]
        void SetReadLists(string[][] list);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/SetReadLists")]
        System.Threading.Tasks.Task SetReadListsAsync(string[][] list);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Set_Bit")]
        void Set_Bit(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, System.Collections.Generic.Dictionary<int, bool> devs);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Set_Bit")]
        System.Threading.Tasks.Task Set_BitAsync(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, System.Collections.Generic.Dictionary<int, bool> devs);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Set_Data")]
        void Set_Data(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, System.Collections.Generic.Dictionary<int, short> devs);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Set_Data")]
        System.Threading.Tasks.Task Set_DataAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, System.Collections.Generic.Dictionary<int, short> devs);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Set_Int")]
        void Set_Int(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, int val);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Set_Int")]
        System.Threading.Tasks.Task Set_IntAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, int val);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Set_String")]
        void Set_String(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, string val);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Set_String")]
        System.Threading.Tasks.Task Set_StringAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, string val);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGPService/Get_Bit", ReplyAction="http://tempuri.org/IGPService/Get_BitResponse")]
        System.Collections.Generic.Dictionary<int, bool> Get_Bit(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, int[] devs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGPService/Get_Bit", ReplyAction="http://tempuri.org/IGPService/Get_BitResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, bool>> Get_BitAsync(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, int[] devs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGPService/Get_Data", ReplyAction="http://tempuri.org/IGPService/Get_DataResponse")]
        System.Collections.Generic.Dictionary<int, short> Get_Data(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int[] devs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGPService/Get_Data", ReplyAction="http://tempuri.org/IGPService/Get_DataResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, short>> Get_DataAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int[] devs);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGPServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Status_Changed")]
        void Status_Changed(int index, bool val);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Bit_Changed")]
        void Bit_Changed(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, System.Collections.Generic.Dictionary<int, bool> val);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGPService/Data_Changed")]
        void Data_Changed(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, System.Collections.Generic.Dictionary<int, short> val);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGPServiceChannel : GPGO_MultiPLCs.GP_PLCs.IGPService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GPServiceClient : System.ServiceModel.DuplexClientBase<GPGO_MultiPLCs.GP_PLCs.IGPService>, GPGO_MultiPLCs.GP_PLCs.IGPService {
        
        public GPServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GPServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GPServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GPServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GPServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Initial() {
            base.Channel.Initial();
        }
        
        public System.Threading.Tasks.Task InitialAsync() {
            return base.Channel.InitialAsync();
        }
        
        public void CheckSignal(int dev) {
            base.Channel.CheckSignal(dev);
        }
        
        public System.Threading.Tasks.Task CheckSignalAsync(int dev) {
            return base.Channel.CheckSignalAsync(dev);
        }
        
        public void SetReadList(int index, string[] list) {
            base.Channel.SetReadList(index, list);
        }
        
        public System.Threading.Tasks.Task SetReadListAsync(int index, string[] list) {
            return base.Channel.SetReadListAsync(index, list);
        }
        
        public void SetReadLists(string[][] list) {
            base.Channel.SetReadLists(list);
        }
        
        public System.Threading.Tasks.Task SetReadListsAsync(string[][] list) {
            return base.Channel.SetReadListsAsync(list);
        }
        
        public void Set_Bit(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, System.Collections.Generic.Dictionary<int, bool> devs) {
            base.Channel.Set_Bit(type, index, devs);
        }
        
        public System.Threading.Tasks.Task Set_BitAsync(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, System.Collections.Generic.Dictionary<int, bool> devs) {
            return base.Channel.Set_BitAsync(type, index, devs);
        }
        
        public void Set_Data(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, System.Collections.Generic.Dictionary<int, short> devs) {
            base.Channel.Set_Data(type, index, devs);
        }
        
        public System.Threading.Tasks.Task Set_DataAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, System.Collections.Generic.Dictionary<int, short> devs) {
            return base.Channel.Set_DataAsync(type, index, devs);
        }
        
        public void Set_Int(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, int val) {
            base.Channel.Set_Int(type, index, dev, val);
        }
        
        public System.Threading.Tasks.Task Set_IntAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, int val) {
            return base.Channel.Set_IntAsync(type, index, dev, val);
        }
        
        public void Set_String(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, string val) {
            base.Channel.Set_String(type, index, dev, val);
        }
        
        public System.Threading.Tasks.Task Set_StringAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int dev, string val) {
            return base.Channel.Set_StringAsync(type, index, dev, val);
        }
        
        public System.Collections.Generic.Dictionary<int, bool> Get_Bit(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, int[] devs) {
            return base.Channel.Get_Bit(type, index, devs);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, bool>> Get_BitAsync(GPGO_MultiPLCs.GP_PLCs.BitType type, int index, int[] devs) {
            return base.Channel.Get_BitAsync(type, index, devs);
        }
        
        public System.Collections.Generic.Dictionary<int, short> Get_Data(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int[] devs) {
            return base.Channel.Get_Data(type, index, devs);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, short>> Get_DataAsync(GPGO_MultiPLCs.GP_PLCs.DataType type, int index, int[] devs) {
            return base.Channel.Get_DataAsync(type, index, devs);
        }
    }
}
